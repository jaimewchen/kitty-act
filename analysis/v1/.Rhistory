training_category_match_subordinate_choices = sum(test_choice_match_category==1 & test_choice_type == "subordinate"),
training_category_match_basic_choices = sum(test_choice_match_category==1 & test_choice_type == "basic"),
training_category_match_superordinate_choices = sum(test_choice_match_category==1 & test_choice_type == "superordinate"),
training_category_match_subordinate_percent = training_category_match_subordinate_choices,
training_category_match_basic_percent = training_category_match_basic_choices,
training_category_match_superordinate_percent = training_category_match_superordinate_choices/2
)
subj_test_accuracy_v1_1 <- test_array_clean_v1_1 %>%
group_by(participant,number_training_images,round,trial_counter,trial_type,current_category_training_level,current_category_label_level,current_category_kind,final_choice_array,total_number_correct_options) %>%
summarize(
total_choices = n(),
ground_truth_correct_choices = sum(test_choice_type_label_consistent),
ground_truth_incorrect_choices = sum(test_choice_type_label_consistent==0),
training_consistent_choices = sum(test_choice_type_training_consistent),
training_inconsistent_choices = sum(test_choice_type_training_consistent==0),
training_category_match_subordinate_choices = sum(test_choice_match_category==1 & test_choice_type == "subordinate"),
training_category_match_basic_choices = sum(test_choice_match_category==1 & test_choice_type == "basic"),
training_category_match_superordinate_choices = sum(test_choice_match_category==1 & test_choice_type == "superordinate"),
training_category_match_subordinate_percent = training_category_match_subordinate_choices,
training_category_match_basic_percent = training_category_match_basic_choices,
training_category_match_superordinate_percent = training_category_match_superordinate_choices/2
)
subj_test_accuracy_long_v1 <- subj_test_accuracy_v1 %>%
select(participant,number_training_images,round,trial_counter,trial_type,current_category_training_level,current_category_label_level,current_category_kind,final_choice_array,total_number_correct_options,training_category_match_subordinate_percent,training_category_match_basic_percent,training_category_match_superordinate_percent) %>%
group_by(participant,number_training_images,round,trial_counter,trial_type,current_category_training_level,current_category_label_level,current_category_kind,final_choice_array,total_number_correct_options) %>%
pivot_longer(cols=training_category_match_subordinate_percent:training_category_match_superordinate_percent,names_to = "choice_type",values_to = "percent_chosen")
subj_test_accuracy_long_v1_1 <- subj_test_accuracy_v1_1 %>%
select(participant,number_training_images,round,trial_counter,trial_type,current_category_training_level,current_category_label_level,current_category_kind,final_choice_array,total_number_correct_options,training_category_match_subordinate_percent,training_category_match_basic_percent,training_category_match_superordinate_percent) %>%
group_by(participant,number_training_images,round,trial_counter,trial_type,current_category_training_level,current_category_label_level,current_category_kind,final_choice_array,total_number_correct_options) %>%
pivot_longer(cols=training_category_match_subordinate_percent:training_category_match_superordinate_percent,names_to = "choice_type",values_to = "percent_chosen")
overall_accuracy_by_condition_v1 <- subj_test_accuracy_long_v1 %>%
ungroup() %>%
group_by(number_training_images,current_category_training_level,choice_type) %>%
summarize(
N=n(),
average_percent=mean(percent_chosen)
) %>%
mutate(
choice_type = str_remove(choice_type,"training_category_match_"),
choice_type = str_remove(choice_type,"_percent")
)
overall_accuracy_by_condition_v1_1 <- subj_test_accuracy_long_v1_1 %>%
ungroup() %>%
group_by(number_training_images,current_category_training_level,choice_type) %>%
summarize(
N=n(),
average_percent=mean(percent_chosen)
) %>%
mutate(
choice_type = str_remove(choice_type,"training_category_match_"),
choice_type = str_remove(choice_type,"_percent")
)
overall_accuracy_by_condition_round_v1 <- subj_test_accuracy_long_v1 %>%
ungroup() %>%
group_by(round,number_training_images,current_category_training_level,choice_type) %>%
summarize(
N=n(),
average_percent=mean(percent_chosen)
) %>%
mutate(
choice_type = str_remove(choice_type,"training_category_match_"),
choice_type = str_remove(choice_type,"_percent")
)
overall_accuracy_by_condition_round_v1_1 <- subj_test_accuracy_long_v1_1 %>%
ungroup() %>%
group_by(round,number_training_images,current_category_training_level,choice_type) %>%
summarize(
N=n(),
average_percent=mean(percent_chosen)
) %>%
mutate(
choice_type = str_remove(choice_type,"training_category_match_"),
choice_type = str_remove(choice_type,"_percent")
)
overall_accuracy_label_level_by_condition_v1 <- subj_test_accuracy_long_v1 %>%
ungroup() %>%
group_by(number_training_images,current_category_training_level,current_category_label_level,choice_type) %>%
summarize(
N=n(),
average_percent=mean(percent_chosen)
) %>%
mutate(
choice_type = str_remove(choice_type,"training_category_match_"),
choice_type = str_remove(choice_type,"_percent")
)
overall_accuracy_label_level_by_condition_v1_1 <- subj_test_accuracy_long_v1_1 %>%
ungroup() %>%
group_by(number_training_images,current_category_training_level,current_category_label_level,choice_type) %>%
summarize(
N=n(),
average_percent=mean(percent_chosen)
) %>%
mutate(
choice_type = str_remove(choice_type,"training_category_match_"),
choice_type = str_remove(choice_type,"_percent")
)
overall_accuracy_label_level_by_condition_v1 <- subj_test_accuracy_long_v1 %>%
ungroup() %>%
group_by(number_training_images,current_category_training_level,current_category_label_level,choice_type) %>%
summarize(
N=n(),
average_percent=mean(percent_chosen)
) %>%
mutate(
choice_type = str_remove(choice_type,"training_category_match_"),
choice_type = str_remove(choice_type,"_percent")
)
overall_accuracy_label_level_by_condition_v1_1 <- subj_test_accuracy_long_v1_1 %>%
ungroup() %>%
group_by(number_training_images,current_category_training_level,current_category_label_level,choice_type) %>%
summarize(
N=n(),
average_percent=mean(percent_chosen)
) %>%
mutate(
choice_type = str_remove(choice_type,"training_category_match_"),
choice_type = str_remove(choice_type,"_percent")
)
overall_accuracy_label_level_by_condition_round_v1 <- subj_test_accuracy_long_v1 %>%
ungroup() %>%
group_by(round,number_training_images,current_category_training_level,current_category_label_level,choice_type) %>%
summarize(
N=n(),
average_percent=mean(percent_chosen)
) %>%
mutate(
choice_type = str_remove(choice_type,"training_category_match_"),
choice_type = str_remove(choice_type,"_percent")
)
overall_accuracy_label_level_by_condition_round_v1_1 <- subj_test_accuracy_long_v1_1 %>%
ungroup() %>%
group_by(round,number_training_images,current_category_training_level,current_category_label_level,choice_type) %>%
summarize(
N=n(),
average_percent=mean(percent_chosen)
) %>%
mutate(
choice_type = str_remove(choice_type,"training_category_match_"),
choice_type = str_remove(choice_type,"_percent")
)
### longer test representation
subj_test_accuracy_all_v1 <- test_array_options_clean_v1 %>%
group_by(participant,number_training_images,round,trial_counter,trial_type,current_category_training_level,current_category_label_level,current_category_kind,final_choice_array,total_number_correct_options_label,total_number_correct_options_training) %>%
summarize(
accuracy_training = mean(is_match_to_training, na.rm=TRUE),
accuracy_label = mean(is_match_to_label,na.rm=TRUE),
hit_rate_training = mean(hit_training,na.rm=TRUE),
hit_rate_label = mean(hit_label,na.rm=TRUE),
false_alarm_rate_training = mean(false_alarm_training,na.rm=TRUE),
false_alarm_rate_label = mean(false_alarm_label,na.rm=TRUE)
) %>%
mutate(
hit_rate_training_adj= case_when(
hit_rate_training==1 ~ 1 - 1/(2*total_number_correct_options_training),
hit_rate_training==0 ~ 1/(2*total_number_correct_options_training),
TRUE ~ hit_rate_training
),
hit_rate_label_adj= case_when(
hit_rate_label==1 ~ 1 - 1/(2*total_number_correct_options_label),
hit_rate_label==0 ~ 1/(2*total_number_correct_options_label),
TRUE ~ hit_rate_label
),
false_alarm_rate_training_adj= case_when(
false_alarm_rate_training==0 ~ 1/(2*total_number_correct_options_training),
false_alarm_rate_training==1 ~ 1 - 1/(2*total_number_correct_options_training),
TRUE ~ false_alarm_rate_training
),
false_alarm_rate_label_adj= case_when(
false_alarm_rate_label==0 ~ 1/(2*total_number_correct_options_label),
false_alarm_rate_label==1 ~ 1 - 1/(2*total_number_correct_options_label),
TRUE ~ false_alarm_rate_label
)
) %>%
mutate(
dprime_training=qnorm(hit_rate_training_adj) - qnorm(false_alarm_rate_training_adj),
dprime_label=qnorm(hit_rate_label_adj) - qnorm(false_alarm_rate_label_adj),
c_training=-.5*(qnorm(hit_rate_training_adj) + qnorm(false_alarm_rate_training_adj)),
c_label=-.5*(qnorm(hit_rate_label_adj) + qnorm(false_alarm_rate_label_adj)))
subj_test_accuracy_all_v1_1 <- test_array_options_clean_v1_1 %>%
group_by(participant,number_training_images,round,trial_counter,trial_type,current_category_training_level,current_category_label_level,current_category_kind,final_choice_array,total_number_correct_options_label,total_number_correct_options_training) %>%
summarize(
accuracy_training = mean(is_match_to_training, na.rm=TRUE),
accuracy_label = mean(is_match_to_label,na.rm=TRUE),
hit_rate_training = mean(hit_training,na.rm=TRUE),
hit_rate_label = mean(hit_label,na.rm=TRUE),
false_alarm_rate_training = mean(false_alarm_training,na.rm=TRUE),
false_alarm_rate_label = mean(false_alarm_label,na.rm=TRUE)
) %>%
mutate(
hit_rate_training_adj= case_when(
hit_rate_training==1 ~ 1 - 1/(2*total_number_correct_options_training),
hit_rate_training==0 ~ 1/(2*total_number_correct_options_training),
TRUE ~ hit_rate_training
),
hit_rate_label_adj= case_when(
hit_rate_label==1 ~ 1 - 1/(2*total_number_correct_options_label),
hit_rate_label==0 ~ 1/(2*total_number_correct_options_label),
TRUE ~ hit_rate_label
),
false_alarm_rate_training_adj= case_when(
false_alarm_rate_training==0 ~ 1/(2*total_number_correct_options_training),
false_alarm_rate_training==1 ~ 1 - 1/(2*total_number_correct_options_training),
TRUE ~ false_alarm_rate_training
),
false_alarm_rate_label_adj= case_when(
false_alarm_rate_label==0 ~ 1/(2*total_number_correct_options_label),
false_alarm_rate_label==1 ~ 1 - 1/(2*total_number_correct_options_label),
TRUE ~ false_alarm_rate_label
)
) %>%
mutate(
dprime_training=qnorm(hit_rate_training_adj) - qnorm(false_alarm_rate_training_adj),
dprime_label=qnorm(hit_rate_label_adj) - qnorm(false_alarm_rate_label_adj),
c_training=-.5*(qnorm(hit_rate_training_adj) + qnorm(false_alarm_rate_training_adj)),
c_label=-.5*(qnorm(hit_rate_label_adj) + qnorm(false_alarm_rate_label_adj)))
subj_test_accuracy_all_v1 <- full_join(sampling_data_v1,subj_test_accuracy_all_v1)
subj_test_accuracy_all_v1_1 <- full_join(sampling_data_v1_1,subj_test_accuracy_all_v1_1)
subj_test_accuracy_all_v1 <- full_join(sampling_data_v1,subj_test_accuracy_all_v1)
subj_test_accuracy_all_v1_1 <- full_join(sampling_data_v1_1,subj_test_accuracy_all_v1_1)
overall_accuracy_label_level_sampling_all_v1 <- subj_test_accuracy_all_v1 %>%
ungroup() %>%
group_by(sampling_choice_type,current_category_training_level,current_category_label_level) %>%
summarize(
N=n(),
average_dprime_training=mean(dprime_training),
average_dprime_label=mean(dprime_label)
)
overall_accuracy_label_level_sampling_all_v1_1 <- subj_test_accuracy_all_v1_1 %>%
ungroup() %>%
group_by(sampling_choice_type,current_category_training_level,current_category_label_level) %>%
summarize(
N=n(),
average_dprime_training=mean(dprime_training),
average_dprime_label=mean(dprime_label)
)
sampling_data_v1 <- sampling_data_v1 %>%
mutate(
sampled_category_level_kind_info_choice_order = case_when(
sampled_category_level_kind_info == "outside_category" ~ "a_outside_category",
sampled_category_level_kind_info == "sub" ~ "b_sub",
sampled_category_level_kind_info == "bas" ~ "c_bas",
sampled_category_level_kind_info == "sup" ~ "d_sup"
),
current_category_training_level_order = case_when(
current_category_training_level == "narrow" ~ "a_narrow",
current_category_training_level == "intermediate" ~ "b_intermediate",
current_category_training_level == "broad" ~ "c_broad"
)
)
sampling_data_v1_1 <- sampling_data_v1_1 %>%
mutate(
sampled_category_level_kind_info_choice_order = case_when(
sampled_category_level_kind_info == "outside_category" ~ "a_outside_category",
sampled_category_level_kind_info == "sub" ~ "b_sub",
sampled_category_level_kind_info == "bas" ~ "c_bas",
sampled_category_level_kind_info == "sup" ~ "d_sup"
),
current_category_training_level_order = case_when(
current_category_training_level == "narrow" ~ "a_narrow",
current_category_training_level == "intermediate" ~ "b_intermediate",
current_category_training_level == "broad" ~ "c_broad"
)
)
sampling_data_3_images_only_v1 <- sampling_data_v1 %>%
filter(number_training_images==3)
sampling_data_3_images_only_v1_1 <- sampling_data_v1_1 %>%
filter(number_training_images==3)
#fit multinomial model
nnetFixedModelStr <- 'sampled_category_level_kind_info_choice_order ~ current_category_training_level_order'
nnetFixedFit_v1 <-  multinom(as.formula(nnetFixedModelStr), sampling_data_3_images_only_v1, maxit=10000, abstol=1e-8, reltol=1e-10)
summary(nnetFixedFit_v1)
Anova(nnetFixedFit_v1,type="III")
nnetFixedFit_v1_1 <-  multinom(as.formula(nnetFixedModelStr), sampling_data_3_images_only_v1_1, maxit=10000, abstol=1e-8, reltol=1e-10)
summary(nnetFixedFit_v1_1)
Anova(nnetFixedFit_v1_1,type="III")
Anova(nnetFixedFit_v1,type="III")
View(sampling_data_3_images_only_v1)
library(here)
library(tidyverse)
library(ggplot2)
library(viridisLite)
library(lme4)
library(ggstance)
library(cowplot)
library(AICcmodavg)
library(RColorBrewer)
library(jsonlite)
library(tidyjson)
library(rlang)
library(car)
library(nnet)
library(mlogit)
library(lmerTest)
library(assertthat)
library(knitr)
source("helper.R")
data_path <- here("processed_data", "kitty-act-v1-alldata.csv")
sampling_data_path <- here("processed_data", "kitty-act-v1-processed_data_sampling.csv")
test_data_path <- here("processed_data", "kitty-act-v1-processed_data.csv")
test_data_long_path <- here("processed_data", "kitty-act-v1-processed_data_long.csv")
participant_info_path <- here("processed_data","kitty-act-v1-participant_info.csv")
write_path <- here("processed_data")
figure_path <- here("figures")
d <- read_csv(data_path) %>%
mutate(number_training_images_order = case_when(
number_training_image_order_vector == "[1,3]" ~ "One-Three",
number_training_image_order_vector == "[3,1]" ~ "Three-One",
))
sampling_data <- read_csv(sampling_data_path) %>%
mutate(number_training_images_order = case_when(
number_training_image_order_vector == "[1,3]" ~ "One-Three",
number_training_image_order_vector == "[3,1]" ~ "Three-One",
))
test_array_clean <- read_csv(test_data_path) %>%
mutate(number_training_images_order = case_when(
number_training_image_order_vector == "[1,3]" ~ "One-Three",
number_training_image_order_vector == "[3,1]" ~ "Three-One",
))
test_array_options_clean <- read_csv(test_data_long_path) %>%
mutate(number_training_images_order = case_when(
number_training_image_order_vector == "[1,3]" ~ "One-Three",
number_training_image_order_vector == "[3,1]" ~ "Three-One",
))
#participant info
participant_info <- read_csv(participant_info_path) %>%
filter(pilot == "no")
participant_info <- participant_info %>%
mutate(resid_month_decimal=age_day_count/30.417) %>%
mutate(age_dec = age_mos+resid_month_decimal,
age_years=age_mos/12) %>%
mutate(
age_years_c=age_years-mean(age_years)
)
average_age <- participant_info %>%
summarize(
N=n(),
mean_age=mean(age_years,na.rm=TRUE),
sd_age=sd(age_years,na.rm=TRUE),
min_age=min(age_years,na.rm=TRUE),
max_age=max(age_years,na.rm=TRUE)
)
average_age %>%
kable()
#check that integration will work
#all subject ids in the response data and the participant info are shared
setdiff(unique(d$subject_id),unique(participant_info$subject_id))
setdiff(unique(participant_info$subject_id),unique(d$subject_id))
participant_info_ages <- participant_info %>% select(subject_id,age_group,age_dec,age_years,age_years_c)
d <- merge(d, participant_info_ages)
sampling_data <- merge(sampling_data, participant_info_ages)
test_array_clean <- merge(test_array_clean, participant_info_ages)
test_array_options_clean <- merge(test_array_options_clean, participant_info_ages)
#check that we have all of the participants we expect
assert_that(length(unique(sampling_data$subject_id))==length(unique(test_array_clean$subject_id)))
assert_that(length(unique(sampling_data$subject_id))==83)
## shorter test representation
subj_test_accuracy <- test_array_clean %>%
group_by(participant,number_training_images,round,trial_counter,trial_type,current_category_training_level,current_category_label_level,current_category_kind,final_choice_array,total_number_correct_options) %>%
summarize(
total_choices = n(),
ground_truth_correct_choices = sum(test_choice_type_label_consistent),
ground_truth_incorrect_choices = sum(test_choice_type_label_consistent==0),
training_consistent_choices = sum(test_choice_type_training_consistent),
training_inconsistent_choices = sum(test_choice_type_training_consistent==0),
training_category_match_subordinate_choices = sum(test_choice_match_category==1 & test_choice_type == "subordinate"),
training_category_match_basic_choices = sum(test_choice_match_category==1 & test_choice_type == "basic"),
training_category_match_superordinate_choices = sum(test_choice_match_category==1 & test_choice_type == "superordinate"),
training_category_match_subordinate_percent = training_category_match_subordinate_choices,
training_category_match_basic_percent = training_category_match_basic_choices,
training_category_match_superordinate_percent = training_category_match_superordinate_choices/2
)
subj_test_accuracy_long <- subj_test_accuracy %>%
select(participant,number_training_images,round,trial_counter,trial_type,current_category_training_level,current_category_label_level,current_category_kind,final_choice_array,total_number_correct_options,training_category_match_subordinate_percent,training_category_match_basic_percent,training_category_match_superordinate_percent) %>%
group_by(participant,number_training_images,round,trial_counter,trial_type,current_category_training_level,current_category_label_level,current_category_kind,final_choice_array,total_number_correct_options) %>%
pivot_longer(cols=training_category_match_subordinate_percent:training_category_match_superordinate_percent,names_to = "choice_type",values_to = "percent_chosen")
overall_accuracy_by_condition <- subj_test_accuracy_long %>%
ungroup() %>%
group_by(number_training_images,current_category_training_level,choice_type) %>%
summarize(
N=n(),
average_percent=mean(percent_chosen)
) %>%
mutate(
choice_type = str_remove(choice_type,"training_category_match_"),
choice_type = str_remove(choice_type,"_percent")
)
# looking at if 1- or 3-Item first has an effect
overall_accuracy_by_condition_round <- subj_test_accuracy_long %>%
ungroup() %>%
group_by(round,number_training_images,current_category_training_level,choice_type) %>%
summarize(
N=n(),
average_percent=mean(percent_chosen)
) %>%
mutate(
choice_type = str_remove(choice_type,"training_category_match_"),
choice_type = str_remove(choice_type,"_percent")
)
# accuracy based on training condition (N, I, B) and ground-truth (same level or 1 level up)
overall_accuracy_label_level_by_condition <- subj_test_accuracy_long %>%
ungroup() %>%
group_by(number_training_images,current_category_training_level,current_category_label_level,choice_type) %>%
summarize(
N=n(),
average_percent=mean(percent_chosen)
) %>%
mutate(
choice_type = str_remove(choice_type,"training_category_match_"),
choice_type = str_remove(choice_type,"_percent")
)
# again, looking at if 1- or 3-Item first has an effect on above accuracy
overall_accuracy_label_level_by_condition_round <- subj_test_accuracy_long %>%
ungroup() %>%
group_by(round,number_training_images,current_category_training_level,current_category_label_level,choice_type) %>%
summarize(
N=n(),
average_percent=mean(percent_chosen)
) %>%
mutate(
choice_type = str_remove(choice_type,"training_category_match_"),
choice_type = str_remove(choice_type,"_percent")
)
### longer test representation
subj_test_accuracy_all <- test_array_options_clean %>%
group_by(participant,number_training_images,round,trial_counter,trial_type,current_category_training_level,current_category_label_level,current_category_kind,final_choice_array,total_number_correct_options_label,total_number_correct_options_training) %>%
summarize(
accuracy_training = mean(is_match_to_training, na.rm=TRUE),
accuracy_label = mean(is_match_to_label,na.rm=TRUE),
hit_rate_training = mean(hit_training,na.rm=TRUE),
hit_rate_label = mean(hit_label,na.rm=TRUE),
false_alarm_rate_training = mean(false_alarm_training,na.rm=TRUE),
false_alarm_rate_label = mean(false_alarm_label,na.rm=TRUE)
) %>%
mutate(
hit_rate_training_adj= case_when(
hit_rate_training==1 ~ 1 - 1/(2*total_number_correct_options_training),
hit_rate_training==0 ~ 1/(2*total_number_correct_options_training),
TRUE ~ hit_rate_training
),
hit_rate_label_adj= case_when(
hit_rate_label==1 ~ 1 - 1/(2*total_number_correct_options_label),
hit_rate_label==0 ~ 1/(2*total_number_correct_options_label),
TRUE ~ hit_rate_label
),
false_alarm_rate_training_adj= case_when(
false_alarm_rate_training==0 ~ 1/(2*total_number_correct_options_training),
false_alarm_rate_training==1 ~ 1 - 1/(2*total_number_correct_options_training),
TRUE ~ false_alarm_rate_training
),
false_alarm_rate_label_adj= case_when(
false_alarm_rate_label==0 ~ 1/(2*total_number_correct_options_label),
false_alarm_rate_label==1 ~ 1 - 1/(2*total_number_correct_options_label),
TRUE ~ false_alarm_rate_label
)
) %>%
mutate(
dprime_training=qnorm(hit_rate_training_adj) - qnorm(false_alarm_rate_training_adj),
dprime_label=qnorm(hit_rate_label_adj) - qnorm(false_alarm_rate_label_adj),
c_training=-.5*(qnorm(hit_rate_training_adj) + qnorm(false_alarm_rate_training_adj)),
c_label=-.5*(qnorm(hit_rate_label_adj) + qnorm(false_alarm_rate_label_adj)))
subj_test_accuracy_all <- full_join(sampling_data,subj_test_accuracy_all)
# gives accuracy based on training level, ground-truth level, and if sampling was confirm/explore
overall_accuracy_label_level_sampling_all <- subj_test_accuracy_all %>%
ungroup() %>%
group_by(sampling_choice_type,current_category_training_level,current_category_label_level) %>%
summarize(
N=n(),
average_dprime_training=mean(dprime_training),
average_dprime_label=mean(dprime_label)
)
sampling_data <- sampling_data %>%
mutate(
sampled_category_level_kind_info_choice_order = case_when(
sampled_category_level_kind_info == "outside_category" ~ "a_outside_category",
sampled_category_level_kind_info == "sub" ~ "b_sub",
sampled_category_level_kind_info == "bas" ~ "c_bas",
sampled_category_level_kind_info == "sup" ~ "d_sup"
),
current_category_training_level_order = case_when(
current_category_training_level == "narrow" ~ "a_narrow",
current_category_training_level == "intermediate" ~ "b_intermediate",
current_category_training_level == "broad" ~ "c_broad"
)
)
sampling_data_3_images_only <- sampling_data %>%
filter(number_training_images==3)
#fit multinomial model
nnetFixedModelStr <- 'sampled_category_level_kind_info_choice_order ~ current_category_training_level_order'
nnetFixedFit <-  multinom(as.formula(nnetFixedModelStr), sampling_data_3_images_only, maxit=10000, abstol=1e-8, reltol=1e-10)
summary(nnetFixedFit)
Anova(nnetFixedFit,type="III")
# Alternative (equivalent) approach with mlogit
# reformat data for mlogit
mlogit_sampling_data <-  mlogit.data(data=select(sampling_data_3_images_only,participant,sampled_category_level_kind_info_choice_order,current_category_training_level_order,current_category_kind), choice='sampled_category_level_kind_info_choice_order', shape="wide", id.var='participant')
# specify model formula
mlogit_sampling_formula_baseline <- ' sampled_category_level_kind_info_choice_order ~ 0 | 1 | 0'
mlogit_sampling_formula_training <- 'sampled_category_level_kind_info_choice_order ~ 0 | current_category_training_level_order | 0'
# fit models
mlogit_sampling_baseline <- mlogit(as.formula(mlogit_sampling_formula_baseline), data=mlogit_sampling_data, panel=FALSE, iterlim=10000, tol = 1e-8)
print(summary(mlogit_sampling_baseline))
mlogit_sampling_training <- mlogit(as.formula(mlogit_sampling_formula_training), data=mlogit_sampling_data, panel=FALSE, iterlim=10000, tol = 1e-8)
print(summary(mlogit_sampling_training))
# overall test of condition (identical result to nnet method above)
lrtest(mlogit_sampling_baseline,mlogit_sampling_training)
Anova(nnetFixedFit_v1,type="III")
Anova(nnetFixedFit_v1_1,type="III")
summary(nnetFixedFit_v1)
summary(nnetFixedFit_v1_1)
summary(nnetFixedFit)
# overall test of condition (identical result to nnet method above)
lrtest(mlogit_sampling_baseline,mlogit_sampling_training)
View(nnetFixedFit_v1_1)
